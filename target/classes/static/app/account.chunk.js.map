{"version":3,"file":"app/account.chunk.js","mappings":";;;;;;;;;;;;;;;;;AAAA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;ACdA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AAAA;AACA;AACA;AAMA;AACA;AAGA;AAMA;AACA;AACA;AACA;AAIA;AACA;AAMA;AACA;AACA;AACA;AACA;AAGA;AAQA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AC7FA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAEA;AAEA;AACA;AACA;;AAAA;AACA;AACA;AAMA;AACA;AACA;AACA;AAGA;AAMA;AACA;AACA;AACA;AAGA;AAMA;AACA;AACA;AACA;AACA;AAGA;AAQA;AAEA","sources":["webpack://biomob-v-11/./src/main/webapp/app/modules/account/index.tsx","webpack://biomob-v-11/./src/main/webapp/app/modules/account/password/password.tsx","webpack://biomob-v-11/./src/main/webapp/app/modules/account/settings/settings.tsx"],"sourcesContent":["import React from 'react';\r\n\r\nimport ErrorBoundaryRoute from 'app/shared/error/error-boundary-route';\r\n\r\nimport Settings from './settings/settings';\r\nimport Password from './password/password';\r\n\r\nconst Routes = ({ match }) => (\r\n  <div>\r\n    <ErrorBoundaryRoute path={`${match.url}/settings`} component={Settings} />\r\n    <ErrorBoundaryRoute path={`${match.url}/password`} component={Password} />\r\n  </div>\r\n);\r\n\r\nexport default Routes;\r\n","import React, { useState, useEffect } from 'react';\nimport { ValidatedField, ValidatedForm } from 'react-jhipster';\nimport { Row, Col, Button } from 'reactstrap';\nimport { toast } from 'react-toastify';\n\nimport { useAppDispatch, useAppSelector } from 'app/config/store';\nimport { getSession } from 'app/shared/reducers/authentication';\nimport PasswordStrengthBar from 'app/shared/layout/password/password-strength-bar';\nimport { savePassword, reset } from './password.reducer';\n\nexport const PasswordPage = () => {\n  const [password, setPassword] = useState('');\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(reset());\n    dispatch(getSession());\n    return () => {\n      dispatch(reset());\n    };\n  }, []);\n\n  const handleValidSubmit = ({ currentPassword, newPassword }) => {\n    dispatch(savePassword({ currentPassword, newPassword }));\n  };\n\n  const updatePassword = event => setPassword(event.target.value);\n\n  const account = useAppSelector(state => state.authentication.account);\n  const successMessage = useAppSelector(state => state.password.successMessage);\n  const errorMessage = useAppSelector(state => state.password.errorMessage);\n\n  useEffect(() => {\n    if (successMessage) {\n      toast.success(successMessage);\n    } else if (errorMessage) {\n      toast.error(errorMessage);\n    }\n  }, [successMessage, errorMessage]);\n\n  return (\n    <div>\n      <Row className=\"justify-content-center\">\n        <Col md=\"8\">\n          <h2 id=\"password-title\">Senha para {account.login}</h2>\n          <ValidatedForm id=\"password-form\" onSubmit={handleValidSubmit}>\n            <ValidatedField\n              name=\"currentPassword\"\n              label=\"Senha atual\"\n              placeholder={'Senha atual'}\n              type=\"password\"\n              validate={{\n                required: { value: true, message: 'Sua senha é obrigatória' },\n              }}\n              data-cy=\"currentPassword\"\n            />\n            <ValidatedField\n              name=\"newPassword\"\n              label=\"Nova senha\"\n              placeholder={'Nova senha'}\n              type=\"password\"\n              validate={{\n                required: { value: true, message: 'Sua senha é obrigatória.' },\n                minLength: { value: 4, message: 'Sua senha é obrigada a ter pelo menos 4 caracteres.' },\n                maxLength: { value: 50, message: 'Sua senha não pode ser maior que 50 caracteres.' },\n              }}\n              onChange={updatePassword}\n              data-cy=\"newPassword\"\n            />\n            <PasswordStrengthBar password={password} />\n            <ValidatedField\n              name=\"confirmPassword\"\n              label=\"Confirme a nova senha\"\n              placeholder=\"Confirme a nova senha\"\n              type=\"password\"\n              validate={{\n                required: { value: true, message: 'Sua confirmação de senha é obrigatória.' },\n                minLength: { value: 4, message: 'Sua confirmação de senha é obrigada a ter pelo menos 4 caracteres.' },\n                maxLength: { value: 50, message: 'Sua confirmação de senha não pode ser maior que 50 caracteres.' },\n                validate: v => v === password || 'As senhas não são iguais!',\n              }}\n              data-cy=\"confirmPassword\"\n            />\n            <Button color=\"success\" type=\"submit\" data-cy=\"submit\">\n              Salvar\n            </Button>\n          </ValidatedForm>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default PasswordPage;\n","import React, { useEffect } from 'react';\nimport { Button, Col, Row } from 'reactstrap';\nimport { ValidatedField, ValidatedForm, isEmail } from 'react-jhipster';\nimport { toast } from 'react-toastify';\n\nimport { useAppDispatch, useAppSelector } from 'app/config/store';\nimport { getSession } from 'app/shared/reducers/authentication';\nimport { saveAccountSettings, reset } from './settings.reducer';\n\nexport const SettingsPage = () => {\n  const dispatch = useAppDispatch();\n  const account = useAppSelector(state => state.authentication.account);\n  const successMessage = useAppSelector(state => state.settings.successMessage);\n\n  useEffect(() => {\n    dispatch(getSession());\n    return () => {\n      dispatch(reset());\n    };\n  }, []);\n\n  useEffect(() => {\n    if (successMessage) {\n      toast.success(successMessage);\n    }\n  }, [successMessage]);\n\n  const handleValidSubmit = values => {\n    dispatch(\n      saveAccountSettings({\n        ...account,\n        ...values,\n      })\n    );\n  };\n\n  return (\n    <div>\n      <Row className=\"justify-content-center\">\n        <Col md=\"8\">\n          <h2 id=\"settings-title\">Configurações de usuário para {account.login}</h2>\n          <ValidatedForm id=\"settings-form\" onSubmit={handleValidSubmit} defaultValues={account}>\n            <ValidatedField\n              name=\"firstName\"\n              label=\"Primeiro Nome\"\n              id=\"firstName\"\n              placeholder=\"Seu primeiro nome\"\n              validate={{\n                required: { value: true, message: 'Seu primeiro nome é obrigatório.' },\n                minLength: { value: 1, message: 'Seu primeiro nome tem que ter pelo menos 1 caractere.' },\n                maxLength: { value: 50, message: 'Seu primeiro nome não pode passar de 50 caracteres.' },\n              }}\n              data-cy=\"firstname\"\n            />\n            <ValidatedField\n              name=\"lastName\"\n              label=\"Último Nome\"\n              id=\"lastName\"\n              placeholder=\"Seu último nome\"\n              validate={{\n                required: { value: true, message: 'Seu último nome é obrigatório.' },\n                minLength: { value: 1, message: 'Seu último nome tem que ter pelo menos 1 caractere.' },\n                maxLength: { value: 50, message: 'Seu último nome não pode passar de 50 caracteres.' },\n              }}\n              data-cy=\"lastname\"\n            />\n            <ValidatedField\n              name=\"email\"\n              label=\"Email\"\n              placeholder={'Seu email'}\n              type=\"email\"\n              validate={{\n                required: { value: true, message: 'Seu email é obrigatório.' },\n                minLength: { value: 5, message: 'Seu email tem que ter pelo menos 1 caractere.' },\n                maxLength: { value: 254, message: 'Seu email não pode passar de 50 caracteres.' },\n                validate: v => isEmail(v) || 'Seu email é inválido.',\n              }}\n              data-cy=\"email\"\n            />\n            <Button color=\"primary\" type=\"submit\" data-cy=\"submit\">\n              Salvar\n            </Button>\n          </ValidatedForm>\n        </Col>\n      </Row>\n    </div>\n  );\n};\n\nexport default SettingsPage;\n"],"names":[],"sourceRoot":""}